@{
   ViewData["Title"] = "My Listings";
}
<!DOCTYPE html>
<html lang="en">
<head>
   
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>@ViewData["Title"]</title>

<link href="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>
<style>
       .listing-card img {
           width: 300px; /* Set the width to 300 pixels */
           height: 300px; /* Set the height to 300 pixels */
           object-fit: cover; /* This ensures the image covers the area without distortion */
       }
       #imagePreview {
           width: 300px; /* Set the width for the image preview in the modal */
           height: 300px; /* Set the height for the image preview in the modal */
           object-fit: cover; /* This ensures the preview image is displayed correctly */
       }
</style>
<script type="module">
       import { initializeApp } from "https://www.gstatic.com/firebasejs/9.1.3/firebase-app.js";
       import { getDatabase, ref, onValue , get, update, remove } from "https://www.gstatic.com/firebasejs/9.1.3/firebase-database.js";
       import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.1.3/firebase-auth.js";
          import { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from "https://www.gstatic.com/firebasejs/9.1.3/firebase-storage.js";

       const firebaseConfig = {
           apiKey: "AIzaSyB5hjms7ZPmTL4jEuG1P6BIOi6zfSpslgQ",
           authDomain: "bartmartdb-4d9a9.firebaseapp.com",
           databaseURL: "https://bartmartdb-4d9a9-default-rtdb.firebaseio.com",
           projectId: "bartmartdb-4d9a9",
           storageBucket: "bartmartdb-4d9a9.appspot.com",
           messagingSenderId: "242866251858",
           appId: "1:242866251858:web:00f525da3828eae2fd578b",
           measurementId: "G-90SSEGT956"
       };
       const app = initializeApp(firebaseConfig);
       const database = getDatabase(app);
       const auth = getAuth(app);
       const storage = getStorage(app);
       document.addEventListener('DOMContentLoaded', () => {
           onAuthStateChanged(auth, (user) => {
               if (user) {
                   loadUserListings(user.uid);
               } else {
                   window.location.href = '/Home/Login';
               }
           });
       });
       function loadUserListings(userId) {
           const listingsRef = ref(database, 'listings/');
           onValue(listingsRef, (snapshot) => {
               const listings = snapshot.val();
               const listingsContainer = document.getElementById("listingsContainer");
               listingsContainer.innerHTML = ""; // Clear existing listings
               for (const id in listings) {
                   const listing = listings[id];
                   if (listing.userId === userId) {
                      listingsContainer.innerHTML += `
                      <div class="col-md-4">
<div class="listing-card" style="border: 1px solid #ccc; padding: 10px; border-radius: 5px; margin-bottom: 20px;">
<a href="/Home/listingdetails?id=${id}" style="text-decoration: none; color: inherit;">
<img src="${listing.image}" alt="${listing.title}" class="img-fluid" />

<h4>${listing.title}</h4>
<p>${listing.description}</p>
<p>Price: $${listing.price}</p>
</a>
<button class="btn btn-primary" onclick="editListing('${id}')">Edit</button>
<button class="btn btn-danger" onclick="deleteListing('${id}')">Delete</button>
</div>
                       `;
                   }
               }
           });
       }
       window.deleteListing = function(listingId) {
           if (confirm("Are you sure you want to delete this listing?")) {
               remove(ref(database, `listings/${listingId}`))
                   .then(() => alert("Listing deleted successfully!"))
                   .catch((error) => alert("Error deleting listing: " + error.message));
           }
       };
    window.editListing = function(listingId) {
       const listingRef = ref(database, `listings/${listingId}`);
       get(listingRef).then((snapshot) => {
           if (snapshot.exists()) {
               const listing = snapshot.val();
               document.getElementById("editListingId").value = listingId;
               document.getElementById("editTitle").value = listing.title;
               document.getElementById("editDescription").value = listing.description;
               document.getElementById("editPrice").value = listing.price;
                         document.getElementById("editLocation").value = listing.location;
                document.getElementById("editCategory").value = listing.category;
                document.getElementById("editCondition").value = listing.condition;
                document.getElementById("editListingStatus").value = listing.status;

document.querySelector(`input[name="exchangeOption"][value="${listing.isChangeable ? 'Yes' : 'No'}"]`).checked = true;
                document.getElementById("imagePreview").src = listing.image; 

               $('#editModal').modal('show'); // Show the modal using jQuery and Bootstrap
           }
       }).catch((error) => {
           console.error("Error fetching listing: ", error);
       });
   };
        // Save edited listing with postal code validation
        document.getElementById("saveEdit").addEventListener("click", function () {
            const listingId = document.getElementById("editListingId").value;
            const postalCode = document.getElementById("editLocation").value;
            const postalCodeError = document.getElementById("editPostalCodeError");

            // Regular expression for Canadian postal code format (e.g., A1A 1A1)
            const postalCodePattern = /^[A-Za-z]\d[A-Za-z][ -]?\d[A-Za-z]\d$/;

            if (!postalCodePattern.test(postalCode)) {
                postalCodeError.style.display = "block";  // Show error message if invalid
                return; // Stop further execution if postal code is invalid
            } else {
                postalCodeError.style.display = "none";  // Hide error message if valid
            }

            const updatedData = {
                title: document.getElementById("editTitle").value,
                description: document.getElementById("editDescription").value,
                price: document.getElementById("editPrice").value,
                location: postalCode,
                category: document.getElementById("editCategory").value,
                condition: document.getElementById("editCondition").value,
                status: document.getElementById("editListingStatus").value,
                isChangeable: document.querySelector('input[name="exchangeOption"]:checked').value
            };

            const newImageFile = document.getElementById("editImage").files[0];
            if (newImageFile) {
                const imageRef = storageRef(storage, `images/${newImageFile.name}`);
                uploadBytes(imageRef, newImageFile).then((snapshot) => {
                    return getDownloadURL(snapshot.ref);
                }).then((downloadURL) => {
                    updatedData.image = downloadURL; // Add the new image URL to updated data
                    update(ref(database, `listings/${listingId}`), updatedData)
                        .then(() => {
                            alert("Listing updated successfully!");
                            $('#editModal').modal('hide'); // Hide the modal after saving changes
                        })
                        .catch((error) => alert("Error updating listing: " + error.message));
                }).catch((error) => {
                    alert("Error uploading image: " + error.message);
                });
            } else {
                // If no new image is uploaded, just update the other fields
                update(ref(database, `listings/${listingId}`), updatedData)
                    .then(() => {
                        alert("Listing updated successfully!");
                        $('#editModal').modal('hide'); // Hide the modal after saving changes
                    })
                    .catch((error) => alert("Error updating listing: " + error.message));
            }
    });

</script>
</head>
<body>
<div class="container mt-4">
<h2>My Listings</h2>
<div id="listingsContainer" class="row">
<!-- Listings will be dynamically inserted here -->
</div>
</div>
<!-- Edit Listing Modal -->
<div id="editModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
<div class="modal-dialog" role="document">
<div class="modal-content">
<div class="modal-header">
<h5 class="modal-title" id="editModalLabel">Edit Listing</h5>
<button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
<span aria-hidden="true">&times;</span>
</button>
</div>
<div class="modal-body">
<input type="hidden" id="editListingId" />
<div class="form-group">
<label for="editImage">Upload New Image</label>
<input type="file" id="editImage" class="form-control" accept="image/*" />
<img id="imagePreview" class="image-preview" src="https://via.placeholder.com/300" alt="Image Preview" />
</div>
<div class="form-group">
<label for="editTitle">Title:</label>
<input type="text" id="editTitle" class="form-control" required />
</div>
<div class="form-group">
<label for="editDescription">Description:</label>
<textarea id="editDescription" class="form-control" required></textarea>
</div>
<div class="form-group">
<label for="editPrice">Price:</label>
<input type="number" id="editPrice" class="form-control" required />
</div>
                    <div class="form-group">
                        <label for="editLocation">Location:</label>
                        <input type="text" id="editLocation" class="form-control" required />
                        <small id="editPostalCodeError" style="color: red; display: none;">Invalid postal code format. Example: A1A 1A1</small>
                    </div>
<div class="form-group">
<label for="editCategory">Category:</label>
<select id="editCategory" class="form-control" required>
<option selected disabled>Select Category</option>
<option>Electronics</option>
<option>Fashion</option>
<option>Home & Garden</option>
<option>Health & Beauty</option>
<option>Sports & Outdoors</option>
<option>Toys & Games</option>
<option>Automotive</option>
<option>Books, Movies & Music</option>
<option>Real Estate</option>
<option>Services</option>
<option>Pets</option>
<option>Collectibles & Antiques</option>
</select>
</div>
<div class="form-group">
<label for="editCondition">Condition:</label>
<select id="editCondition" class="form-control" required>
<option selected disabled>Select Condition</option>
<option>New</option>
<option>Like New</option>
<option>Used</option>
</select>
</div>
<div class="form-group">
<label for="editListingStatus">Listing Status:</label>
<select id="editListingStatus" class="form-control" required>
<option selected disabled>Select Status</option>
<option>Active</option>
<option>Inactive</option>
<option>On Hold</option>
</select>
</div>
<div class="form-group">
<label class="form-label">Is this item exchangeable?</label><br>
<input type="radio" id="exchangeYes" name="exchangeOption" value="Yes" />
<label for="exchangeYes">Yes</label><br>
<input type="radio" id="exchangeNo" name="exchangeOption" value="No" />
<label for="exchangeNo">No</label>
</div>
</div>
<div class="modal-footer">
<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
<button type="button" class="btn btn-primary" id="saveEdit">Save Changes</button>
</div>
</div>
</div>
</div>
</body>
</html>