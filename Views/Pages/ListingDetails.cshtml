@model BartmartWeb.Models.Listing
@{
   ViewData["Title"] = "Listing Details";
}
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>@ViewData["Title"]</title>
<link href="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.5.0/font/bootstrap-icons.min.css" rel="stylesheet">
<link rel="stylesheet" href="~/css/listings.css" asp-append-version="true" />
<script src="https://atlas.microsoft.com/sdk/javascript/mapcontrol/2/atlas.min.js"></script>
<link rel="stylesheet" href="https://atlas.microsoft.com/sdk/javascript/mapcontrol/2/atlas.min.css" />
</head>
<body>
    <div class="container">
            <h2 class="text-center mb-4">Listing Details</h2>
         <div class="flex-container">
                <!-- Image Section -->
                    <div class="image-section">
                        <img id="listingImage" class="image-preview" alt="Listing Image">
                    </div>
                    <!-- Details Section -->
                    <div class="details-section">
                        <div class="form-group">
                            <label class="form-label"><strong>Title:</strong></label>
                            <p id="listingTitle"></p>
                    </div>
                    <div class="form-group">
                    <label class="form-label"><strong>Description:</strong></label>
                    <p id="listingDescription"></p>
                    </div>
                        <div class="form-group">
                    <label class="form-label"><strong>Price:</strong></label>
                    <p id="listingPrice"></p>
                        </div>
                    <div class="form-group">
                    <label class="form-label"><strong>Crypto Value (Optional):</strong></label>
                    <p id="listingCryptoValue">₿</p>
                    </div>
                    <div class="form-group">
                            <label class="form-label"><strong>Category:</strong></label>
                            <p id="listingCategory"></p>
                    </div>
                    <div class="form-group">
                            <label class="form-label"><strong>Condition:</strong></label>
                            <p id="listingCondition"></p>
                    </div>
                    <div class="form-group">
                            <label class="form-label"><strong>Listing Created:</strong></label>
                            <p id="listingCreationDate"></p>
                    </div>
                        <div class="form-group">
                                <label class="form-label"><strong>Location:</strong></label>
                                <p id="listingLocation"></p>
                        </div>
                        <div class="form-group">
                                <label class="form-label"><strong>Exchangeable:</strong></label>
                                <p id="listingExchangable"></p>
                        </div>
                            <div class="form-group">
                                <label class="form-label"><strong>Status:</strong></label>
                            <p id="listingStatus"></p>

                 <!-- Distance calculator -->
                <div class="form-group">
                    <label for="buyerPostalCode" class="form-label">Enter Your Postal Code:</label>
                    <input type="text" class="form-control" id="buyerPostalCode" placeholder="e.g., M5V 3L9" style="margin: 0;">
                    <button id="calculateDistance" class="btn btn-primary mt-2">Calculate Distance</button>
                </div>

                <!-- Display the calculated distance -->
                <div class="form-group">
                    <label class="form-label">Distance to Item:</label>
                    <p id="distanceToItem"></p>
                </div>
                <div id="mapContainer" style="width: 100%; height: 300px;"></div>
            </div>
                <button id="wishlistButton" class="btn btn-primary">Add to Wishlist</button>

        </div>

            <script type="module">
                import { initializeApp } from "https://www.gstatic.com/firebasejs/9.1.3/firebase-app.js";
                import { getDatabase, ref, set, remove, get } from "https://www.gstatic.com/firebasejs/9.1.3/firebase-database.js";
                import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.1.3/firebase-auth.js";

                const app = initializeApp(firebaseConfig);
                const database = getDatabase(app);
                const auth = getAuth(app);

                // This function loads listing details and handles the map
                async function loadListingDetails(listingId) {
                    if (listingId) {
                        // Load listing details from Firebase
                        const listingRef = ref(database, `listings/${listingId}`);
                        const snapshot = await get(listingRef);

                        if (snapshot.exists()) {
                            const listing = snapshot.val();
                            document.getElementById("listingTitle").innerText = listing.title;
                            document.getElementById("listingDescription").innerText = listing.description;
                            document.getElementById("listingPrice").innerText = `$${listing.price}`;
                            document.getElementById("listingCryptoValue").innerText = `₿${listing.cryptovalue}`;
                            document.getElementById("listingCategory").innerText = listing.category;
                            document.getElementById("listingCondition").innerText = listing.condition;
                            document.getElementById("listingStatus").innerText = listing.status;
                            document.getElementById("listingLocation").innerText = listing.location;
                            document.getElementById("listingImage").src = listing.image || 'https://via.placeholder.com/300';
                            document.getElementById("listingExchangable").innerText = listing.isChangeable ? "Yes" : "No";
                            document.getElementById("listingCreationDate").innerText = formatListingCreationDate(listing.timestamp);

                            // Fetch coordinates and load the map
                            const coordinates = await getCoordinates(listing.location);
                            const azureMapsKey = await fetchAzureMapsKey();
                            loadMap(coordinates, azureMapsKey);
                        } else {
                            console.error("No listing found");
                        }
                    }
                }

                // Function to initialize wishlist functionality once the user is authenticated
                function initializeWishlist(listingId) {
                    onAuthStateChanged(auth, async (user) => {
                        if (user) {
                            const userId = user.uid;
                            const wishlistRef = ref(database, `users/${userId}/wishlist/${listingId}`);

                            // Check if the listing is already in the wishlist
                            const wishlistSnapshot = await get(wishlistRef);
                            if (wishlistSnapshot.exists()) {
                                document.getElementById('wishlistButton').innerText = 'Remove from Wishlist';
                            } else {
                                document.getElementById('wishlistButton').innerText = 'Add to Wishlist';
                            }

                            // Add event listener for the wishlist button
                            document.getElementById('wishlistButton').addEventListener('click', async function () {
                                try {
                                    const wishlistSnapshot = await get(wishlistRef);
                                    if (wishlistSnapshot.exists()) {
                                        // Remove from wishlist
                                        await remove(wishlistRef);
                                        alert("Removed from wishlist");
                                        document.getElementById('wishlistButton').innerText = 'Add to Wishlist';
                                    } else {
                                        // Add to wishlist
                                        const dateAdded = new Date().toISOString();
                                        await set(wishlistRef, { dateAdded });
                                        alert("Added to wishlist");
                                        document.getElementById('wishlistButton').innerText = 'Remove from Wishlist';
                                    }
                                } catch (error) {
                                    console.error("Error updating wishlist:", error);
                                    alert("Failed to update wishlist. Please try again later.");
                                }
                            });
                        } else {
                            // User is not logged in, redirect to login
                            window.location.href = '/Home/Login';
                        }
                    });
                }

                window.onload = async function () {
                    const listingId = new URLSearchParams(window.location.search).get('id');

                    // Load listing details first
                    await loadListingDetails(listingId);

                    // Initialize wishlist functionality
                    initializeWishlist(listingId);

                    // Event listener for Calculate Distance button (if applicable)
                    document.getElementById('calculateDistance').addEventListener('click', async () => {
                        const buyerPostalCode = document.getElementById('buyerPostalCode').value;
                        const itemPostalCode = document.getElementById('listingLocation').innerText;

                        if (!buyerPostalCode) {
                            alert('Please enter your postal code.');
                            return;
                        }

                        try {
                            const [buyerCoords, itemCoords] = await Promise.all([
                                getCoordinates(buyerPostalCode),
                                getCoordinates(itemPostalCode),
                            ]);

                            const distance = calculateDistance(buyerCoords, itemCoords);
                            document.getElementById('distanceToItem').innerText = `${distance.toFixed(2)} km`;

                            // Draw line on the map between buyer and item locations
                            drawLineOnMap(buyerCoords, itemCoords);
                        } catch (error) {
                            console.error('Error calculating distance:', error);
                            alert('An error occurred while calculating the distance. Please check the postal codes and try again.');
                        }
                    });
                };

                // Function to get coordinates from postal code
                async function getCoordinates(postalCode) {
                    try {
                        const response = await fetch(`/AzureMaps/Geocode?postalCode=${encodeURIComponent(postalCode)}`);
                        const data = await response.json();
                        if (data.results && data.results.length > 0) {
                            return data.results[0].position;
                        } else {
                            throw new Error('Unable to geocode postal code.');
                        }
                    } catch (error) {
                        console.error('Error fetching coordinates:', error);
                        throw error;
                    }
                }

                // Function to fetch Azure Maps key from server-side controller
                async function fetchAzureMapsKey() {
                    try {
                        const response = await fetch('/AzureMaps/GetMapKey');
                        if (!response.ok) {
                            throw new Error('Failed to retrieve Azure Maps key');
                        }
                        const data = await response.json();
                        return data.key; // Assuming the response is { "key": "your_azure_maps_key" }
                    } catch (error) {
                        console.error('Error fetching Azure Maps key:', error);
                        throw error;
                    }
                }

                // Function to calculate distance between two coordinates
                function calculateDistance(coord1, coord2) {
                    const toRadians = (degrees) => degrees * (Math.PI / 180);
                    const R = 6371; // Radius of Earth in kilometers

                    const lat1 = coord1.lat;
                    const lon1 = coord1.lon;
                    const lat2 = coord2.lat;
                    const lon2 = coord2.lon;

                    const dLat = toRadians(lat2 - lat1);
                    const dLon = toRadians(lon2 - lon1);

                    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                        Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
                        Math.sin(dLon / 2) * Math.sin(dLon / 2);

                    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                    return R * c; // Distance in kilometers
                }

                // Function to format the listing creation date
                function formatListingCreationDate(date) {
                    const parsedDate = new Date(date);
                    if (isNaN(parsedDate.getTime())) {
                        return "Invalid Date";
                    }
                    const year = parsedDate.getFullYear();
                    const month = String(parsedDate.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed
                    const day = String(parsedDate.getDate()).padStart(2, '0');
                    return `${year}-${month}-${day}`; // Format as YYYY-MM-DD
                }

                // Function to load Azure Maps and display the location
                function loadMap(coordinates, azureMapsKey) {
                    const map = new atlas.Map('mapContainer', {
                        center: [coordinates.lon, coordinates.lat],
                        zoom: 10,
                        view: 'Auto',
                        authOptions: {
                            authType: 'subscriptionKey',
                            subscriptionKey: azureMapsKey
                        }
                    });

                    const marker = new atlas.HtmlMarker({
                        position: [coordinates.lon, coordinates.lat],
                        color: 'red'
                    });

                    map.markers.add(marker);

                    // Store map globally so we can access it in other functions
                    window.mapInstance = map;
                }

                // Function to draw a line between buyer and item locations
                function drawLineOnMap(buyerCoords, itemCoords) {
                    const map = window.mapInstance;

                    if (!map) {
                        console.error("Map instance is not ready.");
                        return;
                    }

                    map.events.add('ready', () => {
                        const lineCoordinates = [
                            [buyerCoords.lon, buyerCoords.lat],
                            [itemCoords.lon, itemCoords.lat]
                        ];

                        const line = new atlas.data.LineString(lineCoordinates);

                        const dataSource = new atlas.source.DataSource();
                        map.sources.add(dataSource);
                        dataSource.add(new atlas.data.Feature(line));

                        const lineLayer = new atlas.layer.LineLayer(dataSource, null, {
                            strokeColor: 'blue',
                            strokeWidth: 2
                        });

                        map.layers.add(lineLayer);
                    });
                }
            </script>

</body>
</html>

